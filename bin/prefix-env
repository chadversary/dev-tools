#!/usr/bin/env python3

import argparse
import getopt
import os
import os.path
import shlex
import sys

from io import StringIO
from sys import exit, stdout, stderr
from textwrap import dedent

PROG = os.path.basename(sys.argv[0])

class Env(dict):

    def __init__(self, orig_env=None):
        dict.__init__(self)

        if orig_env is None:
            self.update(os.environ)
        else:
            self.update(orig_env)

        self.updated_vars = set()

    def prepend_list(self, name, elem):
        old_list = self.get(name, None)

        if old_list is None:
            self[name] = elem
        else:
            self[name] = elem + ':' + old_list

        self.updated_vars.add(name)

class Command:

    def format_help(self):
        raise NotImplementedError

    def usage_error(self, msg):
        print('{}-{}: usage error: {}'.format(PROG, self.name, msg),
              file=stderr)
        exit(129)

    def run(self, args):
        raise NotImplementedError

class HelpCommand(Command):

    name = 'help'

    def format_help(self):
        return "usage: {} {} [topic]\n".format(PROG, self.name)

    def run(self, args):
        if len(args) == 0:
            stdout.write(self.__format_main_help())
        elif args[0].startswith('-'):
            self.usage_error('unknown option {!r}'.format(args[0]))
        else:
            cmd_name = args[0]
            cmd = cmd_table.get(cmd_name, None)
            if cmd is None:
                self.error('unknown command {!r}'.format(cmd_name))
            stdout.write(cmd.format_help())

    def __format_main_help(self):
        buf = StringIO()
        buf.write(dedent("""\
            NAME
                {prog} - tool for custom prefix environments

            USAGE
                {prog} <command> [args...]
                {prog} [-h|--help]

            commands:
            """.format(prog=PROG)))

        for cmd_name in cmd_table.keys():
            buf.write("    {}\n".format(cmd_name))

        return buf.getvalue()

class ExecCommand(Command):

    name = 'exec'

    def format_help(self):
        return dedent("""\
            NAME
                {prog}-{name} - exec a process

            USAGE
                {prog} {name} [-P|--prefix <prefix>] <args>
                {prog} {name} (-h|--help)

            SUMMARY
                Execute a process, given <args> to execvpe(), under the
                prefix's environment.

            OPTIONS
                -P<prefix>, --prefix=<prefix>
                    If <prefix> is not given on the command line, then the
                    environment variable PREFIX, if defined and non-empty, is used
                    instead.  Otherwise, the current directory is used.

            EXAMPLE
                Exec `env` under the prefix's environment. Observe how
                PKG_CONFIG_PATH changes.

                    $ echo "$PKG_CONFIG_PATH"
                    /usr/local/lib/pkgconfig:/usr/local/share/pkgconfig
                    $ prefix-env exec --prefix=/my-prefix env | grep PKG_CONFIG_PATH
                    /my-prefix/pkgconfig:/my-prefix/share/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig
            """.format(prog=PROG, name=self.name))

    def __parse_args(self, args):
        """Return (prefix: str, subargs: [str])."""

        prefix = None
        opts, args = getopt.getopt(args, 'hP:', ['help', 'prefix='])

        for opt, arg in opts:
            if opt in ('-h', '--help'):
                print(self.format_help())
                sys.exit(0)
            elif opt in ('-P', '--prefix'):
                prefix = arg
            else:
                assert False

        if prefix is None:
            prefix = os.environ.get('PREFIX', os.getcwd())

        if len(args) == 0:
            subargs = ['env']
        elif args[0].startswith('-'):
            self.usage_error('unknown option {!r}'.format(args[0]))
        else:
            subargs = args

        return (prefix, subargs)

    def run(self, args):
        (prefix, subargs) = self.__parse_args(args)
        env = make_env(prefix)
        os.execvpe(subargs[0], subargs, env=env)

class EvalCommand(Command):

    name = 'eval'

    def format_help(self):
        return dedent("""\
            NAME
                {prog}-{name}

            USAGE
                {prog} {name} [-P|--prefix <prefix>]
                {prog} {name} (-h|--help)

            SUMMARY
                Print shell code needed to setup the prefix's environment.

            OPTIONS
                -P<prefix>, --prefix=<prefix>
                    If <prefix> is not given on the command line, then the
                    environment variable PREFIX, if defined and non-empty, is used
                    instead.  Otherwise, the current directory is used.

            EXAMPLE
                Update the shell's current environment to use the prefix's
                environment. Observe how PKG_CONFIG_PATH changes.

                    $ echo "$PKG_CONFIG_PATH"
                    /usr/local/lib/pkgconfig:/usr/local/share/pkgconfig
                    $ eval `{prog} {name} --prefix=/my-prefix`
                    $ echo "$PKG_CONFIG_PATH"
                    /my-prefix/pkgconfig:/my-prefix/share/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig
            """.format(prog=PROG, name=self.name))

    def __parse_args(self, args):
        """Return prefix."""

        prefix = None
        opts, args = getopt.getopt(args, 'hP:', ['help', 'prefix='])

        for opt, arg in opts:
            if opt in ('-h', '--help'):
                print(self.format_help())
                sys.exit(0)
            elif opt in ('-P', '--prefix'):
                prefix = arg
            else:
                assert False

        if prefix is None:
            prefix = os.environ.get('PREFIX', os.getcwd())

        if len(args) > 0 and args[0].startswith('-'):
            self.usage_error('unknown option {!r}'.format(args[0]))
        elif len(args) > 0:
            self.usage_error('trailing args: {!r}'.format(args))

        return prefix

    def run(self, args):
        prefix = self.__parse_args(args)
        env = make_env(prefix)

        for var in sorted(env.updated_vars):
            print('{}={};'.format(var, shlex.quote(env[var])))
            print('export {};'.format(var))

def make_env(prefix):
    env = Env()

    # runtime paths
    env.prepend_list('PATH', os.path.join(prefix, 'bin'))
    env.prepend_list('LD_LIBRARY_PATH', os.path.join(prefix, 'lib'))
    env.prepend_list('LIBGL_DRIVERS_PATH', os.path.join(prefix, 'lib/dri'))
    env.prepend_list('EGL_DRIVERS_PATH', os.path.join(prefix, 'lib'))

    # buildtime paths
    env.prepend_list('ACLOCAL_PATH', os.path.join(prefix, 'share/aclocal'))
    env.prepend_list('CPATH', os.path.join(prefix, 'include'))
    env.prepend_list('LIBRARY_PATH', os.path.join(prefix, 'lib'))
    env.prepend_list('PKG_CONFIG_PATH', os.path.join(prefix, 'lib/pkgconfig'))
    env.prepend_list('PKG_CONFIG_PATH', os.path.join(prefix, 'share/pkgconfig'))

    return env

cmd_list = [
    ExecCommand(),
    EvalCommand(),
    HelpCommand(),
]

cmd_table = {
    cmd.name: cmd
    for cmd in cmd_list
}

def main():
    def usage_error(msg):
        print(msg, file=sys.stderr)
        sys.exit(129)

    def parse_args():
        """Return (command_name: str, command_args: [str])."""

        if len(sys.argv) <= 1:
            cmd_name = 'help'
            cmd_args = []
        elif sys.argv[1] in ('-h', '--help'):
            cmd_name = 'help'
            cmd_args = []
        elif sys.argv[1].startswith('-'):
            usage_error('unknown option {!r}'.format(sys.argv[1]))
        else:
            cmd_name = sys.argv[1]
            cmd_args = sys.argv[2:]

        return (cmd_name, cmd_args)

    (cmd_name, cmd_args) = parse_args()

    cmd = cmd_table.get(cmd_name, None)
    if cmd is None:
        usage_error('unknown command {!r}'.format(cmd_name))

    cmd.run(cmd_args)

if __name__ == '__main__':
    main()
